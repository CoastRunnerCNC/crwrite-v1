import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import path from 'path';
import Menu from '../../components/Menu';
import {Button, Container, Grid, Tooltip, Typography, Dialog, DialogTitle, DialogContent} from "@material-ui/core";
import withStyles from '@material-ui/core/styles/withStyles';
import {ipcRenderer, shell} from "electron";
import JobSelection from '../../components/Modals/JobSelection';
import {Redirect} from 'react-router-dom';
import Alert from '../../components/Modals/Alert';
import app from 'app';
import packageJSON from '../../../../package.json';
import ItemPanel from '../../components/ItemPanel/ItemPanel';
import ProbingWizard from '../../components/Modals/ProbingWizard/ProbingWizard';
const crwrite = require("crwrite");
import Shuttle from '../../components/Modals/Shuttle';

const styles = theme => ({
    main: {
        width: '80%',
        height: '45%',
        marginTop: 'auto',
        marginBottom: 'auto',
        marginLeft: 'auto',
        marginRight: 'auto',
        position: 'absolute',
        borderLeft: app.dashboard.border,
        borderRight: app.dashboard.border,
        borderBottom: app.dashboard.border,
    },
    dashboardStyle: {
        backgroundColor: "#F6F6F6",
        backgroundSize: 'cover',
        overflow: 'hidden',
        width: '100%',
        height: '100%',
        position: 'fixed',
        left: 0,
        top: 0,
        z: -1,
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        display: 'flex',
        verticalAlign: 'middle',
    },
    topBanner: {
        backgroundColor: 'black'
    },
    topLeft: {
        width: 'calc(40% - 60px)',
        height: '45%',
        marginTop: 'auto',
        marginBottom: 'auto',
        marginLeft: 'calc(-20% - 30px)',
        position: 'absolute',
        borderTop: app.dashboard.border,
    },
    topRight: {
        width: 'calc(40% - 60px)',
        height: '45%',
        marginTop: 'auto',
        marginBottom: 'auto',
        marginLeft: 'calc(20% + 30px)',
        position: 'absolute',
        borderTop: app.dashboard.border,
    },
    runButton: {
        '&:hover': {
            filter: 'brightness(0.65)'
        },
        lineHeight: '1.2',
    },
    runButtonDisabled: {
        '&:disabled': {
            opacity: 0.5
        },
        lineHeight: '1.2',
    },
    dashButton: {
        lineHeight: '1.2',
        '&:hover': {
            filter: 'brightness(0.65)'
        }
    },
    buttonText: {
        color: '#9B43A7',
        fontSize: '65px',
        fontWeight: 'bold',
        WebkitTextStroke: '2px black',
        paddingBottom: '0'
    },
    buttonSubtext: {
        color: '#34B5B6',
        fontSize: '30px',
        fontWeight: 'bold',
        WebkitTextStroke: '2px black'
    },
    standardButton: {
        borderColor: 'black', // changing the border color
        borderWidth: '2px', // setting border width
        borderStyle: 'solid', // setting border style
        boxShadow: "1px 1px 0px 0px black", // setting shadow
        fontFamily: '"Public Sans", sans-serif', // specifying "public sans" font with a fallback to generic sans-serif
        fontWeight: 'bold', // making the text bold
        fontSize: '35px',
        borderRadius: '0px',
        padding: '0px 25px',
        backgroundColor: '#f6f6f6', // setting the background color
        '&:hover': { // styles for hover state
            backgroundColor: '#D6CDC2', // changing the background color on hover
        }
    },
    smallGreyButton: {
        borderColor: 'black', // changing the border color
        borderWidth: '2px', // setting border width
        borderStyle: 'solid', // setting border style
        boxShadow: "1px 1px 0px 0px black", // setting shadow
        fontFamily: '"Public Sans", sans-serif', // specifying "public sans" font with a fallback to generic sans-serif
        fontWeight: 'bold', // making the text bold
        fontSize: '20px',
        borderRadius: '0px',
        padding: '5px 15px',
        backgroundColor: '#f6f6f6', // setting the background color
        '&:hover': { // styles for hover state
            backgroundColor: '#F0F0F0', // changing the background color on hover
        },
        width: '240px'
    }
});

const GuidedModeSVG = (props) => {
    return (
<svg onClick={props.onClick} style={{ cursor: 'pointer' }} width="86" height="66" viewBox="0 0 86 66" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="29.5258" y="5.5" width="22.4783" height="21.6087" stroke="black"/>
<rect x="23.0584" y="27.239" width="40.7391" height="12.0435" stroke="black"/>
<rect x="22.2432" y="27.239" width="36.3913" height="17.2609" fill="white" stroke="black"/>
<rect x="26.6997" y="27.239" width="27.6957" height="5.08696" stroke="black"/>
<rect x="22.2025" y="27.239" width="36.3913" height="2.47826" stroke="black"/>
<rect x="22.216" y="27.239" width="36.3913" height="9.43478" stroke="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M39.0259 10.2173H42.5041V11.0869H39.0259V10.2173ZM38.1562 10.2173H36.4171V11.0869H38.1562V10.2173ZM39.8954 12.826H36.4172V13.6955H39.8954V12.826ZM36.4172 15.4347H40.765V16.3042H36.4172V15.4347ZM43.3737 18.9129V18.0434H36.4172V18.9129H43.3737ZM36.4172 20.6521H40.765V21.5216H36.4172V20.6521ZM45.9824 15.4347H41.6346V16.3042H45.9824V15.4347ZM43.3737 12.826H40.765V13.6955H43.3737V12.826ZM43.3737 10.2173H45.9824V11.0869H43.3737V10.2173ZM45.9824 12.826H44.2433V13.6955H45.9824V12.826ZM44.2433 18.0434H45.9824V18.9129H44.2433V18.0434ZM45.9824 20.6521H41.6346V21.5216H45.9824V20.6521Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M32.0694 7.60864H32.939V8.47821H32.0694V7.60864ZM32.0693 10.2174H32.9389V11.087H32.0693V10.2174ZM32.9389 12.8261H32.0693V13.6957H32.9389V12.8261ZM32.0693 15.4348H32.9389V16.3043H32.0693V15.4348ZM32.9389 18.0435H32.0693V18.913H32.9389V18.0435ZM32.0693 20.6522H32.9389V21.5217H32.0693V20.6522ZM32.9389 23.2609H32.0693V24.1304H32.9389V23.2609Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M49.4606 7.60864H50.3302V8.47821H49.4606V7.60864ZM49.4607 10.2174H50.3303V11.087H49.4607V10.2174ZM50.3303 12.8261H49.4607V13.6957H50.3303V12.8261ZM49.4607 15.4348H50.3303V16.3043H49.4607V15.4348ZM50.3303 18.0435H49.4607V18.913H50.3303V18.0435ZM49.4607 20.6522H50.3303V21.5217H49.4607V20.6522ZM50.3303 23.2609H49.4607V24.1304H50.3303V23.2609Z" fill="black"/>
<rect x="25.9823" y="40.6521" width="0.869565" height="0.869565" fill="black"/>
<path d="M11.4032 57.66V56.81H13.9032V59.3C13.9032 59.5267 13.8599 59.7433 13.7732 59.95C13.6932 60.1567 13.5766 60.3367 13.4232 60.49C13.2766 60.6433 13.0999 60.7667 12.8932 60.86C12.6866 60.9533 12.4566 61 12.2032 61H10.6032C10.3632 61 10.1399 60.9567 9.93324 60.87C9.73324 60.7767 9.55658 60.6533 9.40324 60.5C9.24991 60.3467 9.12991 60.1667 9.04324 59.96C8.95658 59.7533 8.91324 59.5333 8.91324 59.3V55.2C8.91324 54.9867 8.95658 54.78 9.04324 54.58C9.12991 54.3733 9.24991 54.19 9.40324 54.03C9.55658 53.87 9.73658 53.7433 9.94324 53.65C10.1499 53.55 10.3699 53.5 10.6032 53.5H12.1932C12.4132 53.5 12.6266 53.55 12.8332 53.65C13.0399 53.7433 13.2232 53.87 13.3832 54.03C13.5432 54.1833 13.6699 54.3633 13.7632 54.57C13.8566 54.77 13.9032 54.9767 13.9032 55.19H13.0832C13.0832 54.9167 13.0232 54.7067 12.9032 54.56C12.7832 54.4067 12.6199 54.33 12.4132 54.33H10.5732V60.16H12.2432V57.66H11.4032ZM17.3032 61C17.0632 61 16.8365 60.9567 16.6232 60.87C16.4165 60.7833 16.2332 60.6633 16.0732 60.51C15.9198 60.3567 15.7998 60.1767 15.7132 59.97C15.6265 59.7633 15.5832 59.5433 15.5832 59.31V55.17H17.2432V60.17H18.9132V55.17H20.5732V61H17.3032ZM23.9131 61H22.2531V55.17H23.9131V61ZM23.9131 54.33H22.2531V53.5H23.9131V54.33ZM30.5732 53.5V61H27.3032C27.0898 61 26.8798 60.9533 26.6732 60.86C26.4665 60.76 26.2832 60.6333 26.1232 60.48C25.9632 60.32 25.8332 60.14 25.7332 59.94C25.6332 59.7333 25.5832 59.5233 25.5832 59.31V56.87C25.5832 56.65 25.6332 56.44 25.7332 56.24C25.8332 56.0333 25.9632 55.8533 26.1232 55.7C26.2832 55.54 26.4665 55.4133 26.6732 55.32C26.8798 55.22 27.0898 55.17 27.3032 55.17H28.9132V53.5H30.5732ZM28.9132 56H27.2432V60.16H28.9132V56ZM33.9131 58.5V60.16H35.4631C35.5831 60.16 35.6998 60.14 35.8131 60.1C35.9264 60.0533 36.0264 59.9933 36.1131 59.92C36.1998 59.8467 36.2698 59.76 36.3231 59.66C36.3764 59.56 36.4031 59.45 36.4031 59.33H37.2231C37.2231 59.55 37.1731 59.76 37.0731 59.96C36.9731 60.16 36.8398 60.34 36.6731 60.5C36.5131 60.6533 36.3298 60.7767 36.1231 60.87C35.9164 60.9567 35.7064 61 35.4931 61H33.9431C33.7098 61 33.4898 60.95 33.2831 60.85C33.0831 60.75 32.9064 60.62 32.7531 60.46C32.5998 60.2933 32.4764 60.1067 32.3831 59.9C32.2964 59.6933 32.2531 59.4867 32.2531 59.28V56.88C32.2531 56.6667 32.2964 56.4567 32.3831 56.25C32.4764 56.0433 32.5998 55.86 32.7531 55.7C32.9131 55.54 33.0931 55.4133 33.2931 55.32C33.4998 55.22 33.7164 55.17 33.9431 55.17H35.4931C35.7331 55.17 35.9598 55.22 36.1731 55.32C36.3864 55.4133 36.5698 55.54 36.7231 55.7C36.8764 55.86 36.9964 56.0433 37.0831 56.25C37.1764 56.4567 37.2231 56.6667 37.2231 56.88V58.5H33.9131ZM35.5531 57.67V55.99H33.9131V57.67H35.5531ZM43.8935 53.5V61H40.6235C40.4101 61 40.2001 60.9533 39.9935 60.86C39.7868 60.76 39.6035 60.6333 39.4435 60.48C39.2835 60.32 39.1535 60.14 39.0535 59.94C38.9535 59.7333 38.9035 59.5233 38.9035 59.31V56.87C38.9035 56.65 38.9535 56.44 39.0535 56.24C39.1535 56.0333 39.2835 55.8533 39.4435 55.7C39.6035 55.54 39.7868 55.4133 39.9935 55.32C40.2001 55.22 40.4101 55.17 40.6235 55.17H42.2335V53.5H43.8935ZM42.2335 56H40.5635V60.16H42.2335V56ZM49.1665 53.5L52.9465 57.2L56.7165 53.5H57.0965V61H55.4365V56.34L52.6165 59.32L49.6065 56.34V61H48.7765V53.5H49.1665ZM60.4765 61C60.2232 61 59.9932 60.9567 59.7865 60.87C59.5799 60.7767 59.3999 60.6533 59.2465 60.5C59.0999 60.3467 58.9832 60.1667 58.8965 59.96C58.8165 59.7467 58.7765 59.52 58.7765 59.28V56.88C58.7765 56.6533 58.8199 56.4367 58.9065 56.23C58.9932 56.0233 59.1132 55.8433 59.2665 55.69C59.4199 55.53 59.5999 55.4033 59.8065 55.31C60.0132 55.2167 60.2365 55.17 60.4765 55.17H62.0565C62.3099 55.17 62.5399 55.2167 62.7465 55.31C62.9599 55.4033 63.1399 55.53 63.2865 55.69C63.4399 55.8433 63.5565 56.0233 63.6365 56.23C63.7232 56.4367 63.7665 56.6533 63.7665 56.88V59.28C63.7665 59.52 63.7232 59.7467 63.6365 59.96C63.5565 60.1667 63.4399 60.3467 63.2865 60.5C63.1399 60.6533 62.9599 60.7767 62.7465 60.87C62.5399 60.9567 62.3099 61 62.0565 61H60.4765ZM62.1065 60.16V56H60.4365V60.16H62.1065ZM70.4364 53.5V61H67.1664C66.9531 61 66.7431 60.9533 66.5364 60.86C66.3298 60.76 66.1464 60.6333 65.9864 60.48C65.8264 60.32 65.6964 60.14 65.5964 59.94C65.4964 59.7333 65.4464 59.5233 65.4464 59.31V56.87C65.4464 56.65 65.4964 56.44 65.5964 56.24C65.6964 56.0333 65.8264 55.8533 65.9864 55.7C66.1464 55.54 66.3298 55.4133 66.5364 55.32C66.7431 55.22 66.9531 55.17 67.1664 55.17H68.7764V53.5H70.4364ZM68.7764 56H67.1064V60.16H68.7764V56ZM73.7764 58.5V60.16H75.3264C75.4464 60.16 75.563 60.14 75.6764 60.1C75.7897 60.0533 75.8897 59.9933 75.9764 59.92C76.063 59.8467 76.133 59.76 76.1864 59.66C76.2397 59.56 76.2664 59.45 76.2664 59.33H77.0864C77.0864 59.55 77.0364 59.76 76.9364 59.96C76.8364 60.16 76.703 60.34 76.5364 60.5C76.3764 60.6533 76.193 60.7767 75.9864 60.87C75.7797 60.9567 75.5697 61 75.3564 61H73.8064C73.573 61 73.353 60.95 73.1464 60.85C72.9464 60.75 72.7697 60.62 72.6164 60.46C72.463 60.2933 72.3397 60.1067 72.2464 59.9C72.1597 59.6933 72.1164 59.4867 72.1164 59.28V56.88C72.1164 56.6667 72.1597 56.4567 72.2464 56.25C72.3397 56.0433 72.463 55.86 72.6164 55.7C72.7764 55.54 72.9564 55.4133 73.1564 55.32C73.363 55.22 73.5797 55.17 73.8064 55.17H75.3564C75.5964 55.17 75.823 55.22 76.0364 55.32C76.2497 55.4133 76.433 55.54 76.5864 55.7C76.7397 55.86 76.8597 56.0433 76.9464 56.25C77.0397 56.4567 77.0864 56.6667 77.0864 56.88V58.5H73.7764ZM75.4164 57.67V55.99H73.7764V57.67H75.4164Z" fill="black"/>
</svg>

    );
}

const ManualModeSVG = (props) => {
    return (
<svg onClick={props.onClick} style={{ cursor: 'pointer' }} width="86" height="66" viewBox="0 0 86 66" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M42.089 5L23.8696 24.3548L43.3037 45L61.5231 25.6452L42.089 5Z" stroke="black"/>
<path d="M52.4133 23.0645L58.4865 29.5161V37.258H56.0572V35.9677H46.9475L45.7329 34.6774H44.5182L40.8743 30.8064V29.5161L42.089 28.2257V26.9354L45.7329 23.0645H52.4133Z" fill="white"/>
<path d="M42.089 28.2257V26.9354L45.7329 23.0645H52.4133L58.4865 29.5161V37.258H56.0572V35.9677H46.9475L45.7329 34.6774H44.5182L40.8743 30.8064V29.5161M42.089 28.2257H44.5182M42.089 28.2257L40.8743 29.5161M44.5182 28.2257L45.7329 26.9354H46.9475L48.1621 28.2257V29.5161M44.5182 28.2257V29.5161L45.7329 30.8064H46.9475L48.1621 29.5161M48.1621 29.5161H53.628M40.8743 29.5161H37.2304" stroke="black"/>
<rect x="58.4866" y="28.8711" width="3.64389" height="10.3226" fill="black"/>
<rect x="44.5183" y="28.8711" width="3.64389" height="1.29032" fill="black"/>
<path d="M7.62844 53.5L11.4084 57.2L15.1784 53.5H15.5584V61H13.8984V56.34L11.0784 59.32L8.06844 56.34V61H7.23844V53.5H7.62844ZM18.9784 56C18.6318 56 18.3884 56.0533 18.2484 56.16C18.1151 56.2667 18.0484 56.4267 18.0484 56.64H17.2384C17.2384 56.2133 17.3784 55.8633 17.6584 55.59C17.9384 55.31 18.3718 55.17 18.9584 55.17H20.4984C20.7651 55.17 21.0051 55.22 21.2184 55.32C21.4318 55.4133 21.6118 55.54 21.7584 55.7C21.9118 55.86 22.0284 56.0433 22.1084 56.25C22.1884 56.4567 22.2284 56.6667 22.2284 56.88V61H18.9184C18.6918 61 18.4751 60.96 18.2684 60.88C18.0684 60.8 17.8918 60.6867 17.7384 60.54C17.5851 60.3867 17.4618 60.2033 17.3684 59.99C17.2818 59.7767 17.2384 59.54 17.2384 59.28V58.39C17.2384 58.17 17.2851 57.9667 17.3784 57.78C17.4784 57.5933 17.6051 57.43 17.7584 57.29C17.9184 57.15 18.0984 57.04 18.2984 56.96C18.4984 56.88 18.7051 56.84 18.9184 56.84H20.5684V56H18.9784ZM20.5684 57.67H18.8984V60.16H20.5684V57.67ZM27.1684 55.17C27.4084 55.17 27.6317 55.22 27.8384 55.32C28.0517 55.4133 28.235 55.54 28.3884 55.7C28.5484 55.86 28.6717 56.0433 28.7584 56.25C28.8517 56.4567 28.8984 56.6667 28.8984 56.88V61H27.2384V56H25.5684V61H23.9084V55.17H27.1684ZM32.2983 61C32.0583 61 31.8316 60.9567 31.6183 60.87C31.4116 60.7833 31.2283 60.6633 31.0683 60.51C30.9149 60.3567 30.7949 60.1767 30.7083 59.97C30.6216 59.7633 30.5783 59.5433 30.5783 59.31V55.17H32.2383V60.17H33.9083V55.17H35.5683V61H32.2983ZM38.9882 56C38.6415 56 38.3982 56.0533 38.2582 56.16C38.1249 56.2667 38.0582 56.4267 38.0582 56.64H37.2482C37.2482 56.2133 37.3882 55.8633 37.6682 55.59C37.9482 55.31 38.3815 55.17 38.9682 55.17H40.5082C40.7749 55.17 41.0149 55.22 41.2282 55.32C41.4415 55.4133 41.6215 55.54 41.7682 55.7C41.9215 55.86 42.0382 56.0433 42.1182 56.25C42.1982 56.4567 42.2382 56.6667 42.2382 56.88V61H38.9282C38.7015 61 38.4849 60.96 38.2782 60.88C38.0782 60.8 37.9015 60.6867 37.7482 60.54C37.5949 60.3867 37.4715 60.2033 37.3782 59.99C37.2915 59.7767 37.2482 59.54 37.2482 59.28V58.39C37.2482 58.17 37.2949 57.9667 37.3882 57.78C37.4882 57.5933 37.6149 57.43 37.7682 57.29C37.9282 57.15 38.1082 57.04 38.3082 56.96C38.5082 56.88 38.7149 56.84 38.9282 56.84H40.5782V56H38.9882ZM40.5782 57.67H38.9082V60.16H40.5782V57.67ZM45.5781 61H43.9181V53.5H45.5781V61ZM50.8413 53.5L54.6213 57.2L58.3913 53.5H58.7713V61H57.1113V56.34L54.2913 59.32L51.2813 56.34V61H50.4513V53.5H50.8413ZM62.1513 61C61.898 61 61.668 60.9567 61.4613 60.87C61.2547 60.7767 61.0747 60.6533 60.9213 60.5C60.7747 60.3467 60.658 60.1667 60.5713 59.96C60.4913 59.7467 60.4513 59.52 60.4513 59.28V56.88C60.4513 56.6533 60.4947 56.4367 60.5813 56.23C60.668 56.0233 60.788 55.8433 60.9413 55.69C61.0947 55.53 61.2747 55.4033 61.4813 55.31C61.688 55.2167 61.9113 55.17 62.1513 55.17H63.7313C63.9847 55.17 64.2147 55.2167 64.4213 55.31C64.6347 55.4033 64.8147 55.53 64.9613 55.69C65.1147 55.8433 65.2313 56.0233 65.3113 56.23C65.398 56.4367 65.4413 56.6533 65.4413 56.88V59.28C65.4413 59.52 65.398 59.7467 65.3113 59.96C65.2313 60.1667 65.1147 60.3467 64.9613 60.5C64.8147 60.6533 64.6347 60.7767 64.4213 60.87C64.2147 60.9567 63.9847 61 63.7313 61H62.1513ZM63.7813 60.16V56H62.1113V60.16H63.7813ZM72.1113 53.5V61H68.8413C68.6279 61 68.4179 60.9533 68.2113 60.86C68.0046 60.76 67.8213 60.6333 67.6613 60.48C67.5013 60.32 67.3713 60.14 67.2713 59.94C67.1713 59.7333 67.1213 59.5233 67.1213 59.31V56.87C67.1213 56.65 67.1713 56.44 67.2713 56.24C67.3713 56.0333 67.5013 55.8533 67.6613 55.7C67.8213 55.54 68.0046 55.4133 68.2113 55.32C68.4179 55.22 68.6279 55.17 68.8413 55.17H70.4513V53.5H72.1113ZM70.4513 56H68.7812V60.16H70.4513V56ZM75.4512 58.5V60.16H77.0012C77.1212 60.16 77.2378 60.14 77.3512 60.1C77.4645 60.0533 77.5645 59.9933 77.6512 59.92C77.7378 59.8467 77.8078 59.76 77.8612 59.66C77.9145 59.56 77.9412 59.45 77.9412 59.33H78.7612C78.7612 59.55 78.7112 59.76 78.6112 59.96C78.5112 60.16 78.3778 60.34 78.2112 60.5C78.0512 60.6533 77.8678 60.7767 77.6612 60.87C77.4545 60.9567 77.2445 61 77.0312 61H75.4812C75.2478 61 75.0278 60.95 74.8212 60.85C74.6212 60.75 74.4445 60.62 74.2912 60.46C74.1378 60.2933 74.0145 60.1067 73.9212 59.9C73.8345 59.6933 73.7912 59.4867 73.7912 59.28V56.88C73.7912 56.6667 73.8345 56.4567 73.9212 56.25C74.0145 56.0433 74.1378 55.86 74.2912 55.7C74.4512 55.54 74.6312 55.4133 74.8312 55.32C75.0378 55.22 75.2545 55.17 75.4812 55.17H77.0312C77.2712 55.17 77.4978 55.22 77.7112 55.32C77.9245 55.4133 78.1078 55.54 78.2612 55.7C78.4145 55.86 78.5345 56.0433 78.6212 56.25C78.7145 56.4567 78.7612 56.6667 78.7612 56.88V58.5H75.4512ZM77.0912 57.67V55.99H75.4512V57.67H77.0912Z" fill="black"/>
</svg>

    )
}

const ManualMode = (props) => {
    let tooltip = "";
    let disabled = false;
    if (props.milling) {
        tooltip = 'Disabled while machine is running';
        disabled = true;
    }
    

    return (
        <>
        <Tooltip
        disableHoverListener={!disabled}
        disableFocusListener={true}
        disableTouchListener={true}
        title={tooltip}
    >
        <ManualModeSVG onClick={props.handleManualOpenClick} />
        </Tooltip>

        <Dialog
                    open={props.openShuttle}
                    aria-labelledby="form-dialog-title"
                    PaperProps={{ style: {height: '100%', maxWidth: '1600px', backgroundColor: '#f6f6f6'}}}
                    maxWidth="xl"
                    fullWidth
                >
                    <DialogTitle style={{padding: '0px'}}>
                        <Grid container>
                            <Grid item xs={1} />
                            <Grid item xs={10}>
                            </Grid>
                            <Grid item xs={1}>
                                <Button onClick={props.toggleShuttle}>X</Button>
                            </Grid>
                        </Grid>
                    </DialogTitle>
                    <DialogContent className={'no-scroll'} style={{overflow: 'auto'}}>
                        <Operations closeDialog={props.closeDialog} firmware={props.firmware} open={props.open} milling={props.milling} setMilling={props.setMilling} feedRate={props.feedRate} updateFeedRate={props.updateFeedRate} />
                    </DialogContent>
                </Dialog>
        </>
    )
}

const FileCreater = (props) => {
    return (
        <svg onClick={props.onClick} width="86" height="66" viewBox="0 0 86 66" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.1 37V37.5H15.6H21.6H22.1V37V31V30.5H21.6H15.6H15.1V31V37ZM18 32.924H17.5V33.424V34.148H17.3V32.724H18.7V32.924H18Z" stroke="black"/>
<path d="M38.3 21.376V21.876H38.8H46H46.5V21.376V15.4V14.9H46H45.324V14.176V13.676H44.824H44.1V13V12.5H43.6H28H27.5V13V13.676H26.824H26.324V14.176V14.9H25.6H25.1V15.4V34.6V35.1H25.6H26.324V35.776V36.276H26.824H27.5V37V37.5H28H43.6H44.1V37V36.276H44.824H45.324V35.776V35.1H46H46.5V34.6V28.576V28.076H46H38.8H38.3V28.576V31.676H33.3V18.276H38.3V21.376Z" stroke="black"/>
<path d="M69.2 26.7H69.7V26.2V25.476H70.4H70.9V24.976V15.4V14.9H70.4H69.7V14.176V13.676H69.2H68.5V13V12.5H68H50H49.5V13V37V37.5H50H57.2H57.7V37V27.9H61.5V28.576V29.076H62H62.7V37V37.5H63.2H70.4H70.9V37V28.576V28.076H70.4H69.7V27.4V26.9H69.2H68.5V26.7H69.2ZM62.7 22.1H57.7V18.276H62.7V22.1Z" stroke="black"/>
<path d="M15.1827 57.67H13.5127V61H11.8527V53.5H16.0127V54.33H13.5127V56.83H15.1827V57.67ZM19.3428 61H17.6828V55.17H19.3428V61ZM19.3428 54.33H17.6828V53.5H19.3428V54.33ZM22.6729 61H21.0129V53.5H22.6729V61ZM26.0029 58.5V60.16H27.5529C27.6729 60.16 27.7896 60.14 27.9029 60.1C28.0163 60.0533 28.1163 59.9933 28.2029 59.92C28.2896 59.8467 28.3596 59.76 28.4129 59.66C28.4663 59.56 28.4929 59.45 28.4929 59.33H29.3129C29.3129 59.55 29.2629 59.76 29.1629 59.96C29.0629 60.16 28.9296 60.34 28.7629 60.5C28.6029 60.6533 28.4196 60.7767 28.2129 60.87C28.0063 60.9567 27.7963 61 27.5829 61H26.0329C25.7996 61 25.5796 60.95 25.3729 60.85C25.1729 60.75 24.9963 60.62 24.8429 60.46C24.6896 60.2933 24.5663 60.1067 24.4729 59.9C24.3863 59.6933 24.3429 59.4867 24.3429 59.28V56.88C24.3429 56.6667 24.3863 56.4567 24.4729 56.25C24.5663 56.0433 24.6896 55.86 24.8429 55.7C25.0029 55.54 25.1829 55.4133 25.3829 55.32C25.5896 55.22 25.8063 55.17 26.0329 55.17H27.5829C27.8229 55.17 28.0496 55.22 28.2629 55.32C28.4763 55.4133 28.6596 55.54 28.8129 55.7C28.9663 55.86 29.0863 56.0433 29.1729 56.25C29.2663 56.4567 29.3129 56.6667 29.3129 56.88V58.5H26.0029ZM27.6429 57.67V55.99H26.0029V57.67H27.6429ZM37.6464 53.5C37.8864 53.5 38.1064 53.54 38.3064 53.62C38.5131 53.7 38.6931 53.8133 38.8464 53.96C38.9998 54.1067 39.1198 54.2833 39.2064 54.49C39.2931 54.6967 39.3364 54.9267 39.3364 55.18H38.5164C38.5164 54.9133 38.4364 54.7067 38.2764 54.56C38.1164 54.4067 37.9064 54.33 37.6464 54.33H36.0064V60.17H37.6464C37.7598 60.17 37.8698 60.15 37.9764 60.11C38.0831 60.0633 38.1764 60.0033 38.2564 59.93C38.3364 59.8567 38.3998 59.7667 38.4464 59.66C38.4931 59.5533 38.5164 59.4367 38.5164 59.31H39.3364C39.3364 59.5567 39.2931 59.7833 39.2064 59.99C39.1198 60.1967 38.9998 60.3767 38.8464 60.53C38.6931 60.6767 38.5131 60.7933 38.3064 60.88C38.1064 60.96 37.8864 61 37.6464 61H36.0664C35.8131 61 35.5798 60.96 35.3664 60.88C35.1531 60.7933 34.9698 60.6733 34.8164 60.52C34.6698 60.3667 34.5531 60.1833 34.4664 59.97C34.3864 59.7567 34.3464 59.5233 34.3464 59.27V55.22C34.3464 54.9933 34.3864 54.7767 34.4664 54.57C34.5531 54.3567 34.6698 54.1733 34.8164 54.02C34.9698 53.86 35.1531 53.7333 35.3664 53.64C35.5798 53.5467 35.8131 53.5 36.0664 53.5H37.6464ZM40.8664 61V55.17H42.5264V55.99L42.6864 55.86C42.7864 55.7733 42.9397 55.68 43.1464 55.58C43.3597 55.48 43.6197 55.3867 43.9264 55.3C44.2397 55.2133 44.6064 55.17 45.0264 55.17C45.0264 55.17 45.0264 55.4433 45.0264 55.99C44.653 55.99 44.313 56.04 44.0064 56.14C43.6997 56.2333 43.4364 56.3367 43.2164 56.45C42.9964 56.5633 42.8264 56.67 42.7064 56.77C42.5864 56.8633 42.5264 56.91 42.5264 56.91V61H40.8664ZM47.5264 58.5V60.16H49.0764C49.1964 60.16 49.313 60.14 49.4264 60.1C49.5397 60.0533 49.6397 59.9933 49.7264 59.92C49.813 59.8467 49.883 59.76 49.9364 59.66C49.9897 59.56 50.0164 59.45 50.0164 59.33H50.8364C50.8364 59.55 50.7864 59.76 50.6864 59.96C50.5864 60.16 50.453 60.34 50.2864 60.5C50.1264 60.6533 49.943 60.7767 49.7364 60.87C49.5297 60.9567 49.3197 61 49.1064 61H47.5564C47.323 61 47.103 60.95 46.8964 60.85C46.6964 60.75 46.5197 60.62 46.3664 60.46C46.213 60.2933 46.0897 60.1067 45.9964 59.9C45.9097 59.6933 45.8664 59.4867 45.8664 59.28V56.88C45.8664 56.6667 45.9097 56.4567 45.9964 56.25C46.0897 56.0433 46.213 55.86 46.3664 55.7C46.5264 55.54 46.7064 55.4133 46.9064 55.32C47.113 55.22 47.3297 55.17 47.5564 55.17H49.1064C49.3464 55.17 49.573 55.22 49.7864 55.32C49.9997 55.4133 50.183 55.54 50.3364 55.7C50.4897 55.86 50.6097 56.0433 50.6964 56.25C50.7897 56.4567 50.8364 56.6667 50.8364 56.88V58.5H47.5264ZM49.1664 57.67V55.99H47.5264V57.67H49.1664ZM54.2568 56C53.9101 56 53.6668 56.0533 53.5268 56.16C53.3934 56.2667 53.3268 56.4267 53.3268 56.64H52.5168C52.5168 56.2133 52.6568 55.8633 52.9368 55.59C53.2168 55.31 53.6501 55.17 54.2368 55.17H55.7768C56.0434 55.17 56.2834 55.22 56.4968 55.32C56.7101 55.4133 56.8901 55.54 57.0368 55.7C57.1901 55.86 57.3068 56.0433 57.3868 56.25C57.4668 56.4567 57.5068 56.6667 57.5068 56.88V61H54.1968C53.9701 61 53.7534 60.96 53.5468 60.88C53.3468 60.8 53.1701 60.6867 53.0168 60.54C52.8634 60.3867 52.7401 60.2033 52.6468 59.99C52.5601 59.7767 52.5168 59.54 52.5168 59.28V58.39C52.5168 58.17 52.5634 57.9667 52.6568 57.78C52.7568 57.5933 52.8834 57.43 53.0368 57.29C53.1968 57.15 53.3768 57.04 53.5768 56.96C53.7768 56.88 53.9834 56.84 54.1968 56.84H55.8468V56H54.2568ZM55.8468 57.67H54.1768V60.16H55.8468V57.67ZM59.9867 53.5H61.6467V55.17H62.4767V56H61.6467V60.16H62.4767V61H60.9067C60.7867 61 60.67 60.9767 60.5567 60.93C60.4433 60.8767 60.3433 60.8067 60.2567 60.72C60.1767 60.6333 60.11 60.5367 60.0567 60.43C60.01 60.3167 59.9867 60.2 59.9867 60.08V56H59.1867V55.17H59.9867V53.5ZM65.8574 61C65.604 61 65.374 60.9567 65.1674 60.87C64.9607 60.7767 64.7807 60.6533 64.6274 60.5C64.4807 60.3467 64.364 60.1667 64.2774 59.96C64.1974 59.7467 64.1574 59.52 64.1574 59.28V56.88C64.1574 56.6533 64.2007 56.4367 64.2874 56.23C64.374 56.0233 64.494 55.8433 64.6474 55.69C64.8007 55.53 64.9807 55.4033 65.1874 55.31C65.394 55.2167 65.6174 55.17 65.8574 55.17H67.4374C67.6907 55.17 67.9207 55.2167 68.1274 55.31C68.3407 55.4033 68.5207 55.53 68.6674 55.69C68.8207 55.8433 68.9374 56.0233 69.0174 56.23C69.104 56.4367 69.1474 56.6533 69.1474 56.88V59.28C69.1474 59.52 69.104 59.7467 69.0174 59.96C68.9374 60.1667 68.8207 60.3467 68.6674 60.5C68.5207 60.6533 68.3407 60.7767 68.1274 60.87C67.9207 60.9567 67.6907 61 67.4374 61H65.8574ZM67.4874 60.16V56H65.8174V60.16H67.4874ZM70.8273 61V55.17H72.4873V55.99L72.6473 55.86C72.7473 55.7733 72.9006 55.68 73.1073 55.58C73.3206 55.48 73.5806 55.3867 73.8873 55.3C74.2006 55.2133 74.5673 55.17 74.9873 55.17C74.9873 55.17 74.9873 55.4433 74.9873 55.99C74.614 55.99 74.274 56.04 73.9673 56.14C73.6606 56.2333 73.3973 56.3367 73.1773 56.45C72.9573 56.5633 72.7873 56.67 72.6673 56.77C72.5473 56.8633 72.4873 56.91 72.4873 56.91V61H70.8273Z" fill="black"/>
</svg>

    )
}

const Projects = (props) => {
    return (
        <svg onClick={props.onClick} width="86" height="66" viewBox="0 0 86 66" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="23.5" y="14.4131" width="39" height="25.087" rx="1.5" fill="white" stroke="black"/>
<path d="M28.936 10.5858L25.1739 14.3478H41.6957L38.3785 10.6621C37.9992 10.2406 37.4589 10 36.8919 10H30.3502C29.8197 10 29.311 10.2107 28.936 10.5858Z" fill="white" stroke="black"/>
<path d="M22.1602 56.84H23.8302V54.33H22.1602V56.84ZM23.8302 57.67C23.8302 57.67 23.2735 57.67 22.1602 57.67V61H20.5002V53.5H23.8302C24.0368 53.5 24.2402 53.5433 24.4402 53.63C24.6402 53.71 24.8168 53.8267 24.9702 53.98C25.1302 54.1267 25.2568 54.3033 25.3502 54.51C25.4435 54.71 25.4902 54.93 25.4902 55.17V56C25.4902 56.2067 25.4468 56.41 25.3602 56.61C25.2735 56.81 25.1535 56.99 25.0002 57.15C24.8535 57.3033 24.6802 57.43 24.4802 57.53C24.2802 57.6233 24.0635 57.67 23.8302 57.67ZM27.1701 61V55.17H28.8301V55.99L28.9901 55.86C29.0901 55.7733 29.2434 55.68 29.4501 55.58C29.6634 55.48 29.9234 55.3867 30.2301 55.3C30.5434 55.2133 30.9101 55.17 31.3301 55.17C31.3301 55.17 31.3301 55.4433 31.3301 55.99C30.9567 55.99 30.6167 56.04 30.3101 56.14C30.0034 56.2333 29.7401 56.3367 29.5201 56.45C29.3001 56.5633 29.1301 56.67 29.0101 56.77C28.8901 56.8633 28.8301 56.91 28.8301 56.91V61H27.1701ZM33.8701 61C33.6167 61 33.3867 60.9567 33.1801 60.87C32.9734 60.7767 32.7934 60.6533 32.6401 60.5C32.4934 60.3467 32.3767 60.1667 32.2901 59.96C32.2101 59.7467 32.1701 59.52 32.1701 59.28V56.88C32.1701 56.6533 32.2134 56.4367 32.3001 56.23C32.3867 56.0233 32.5067 55.8433 32.6601 55.69C32.8134 55.53 32.9934 55.4033 33.2001 55.31C33.4067 55.2167 33.6301 55.17 33.8701 55.17H35.4501C35.7034 55.17 35.9334 55.2167 36.1401 55.31C36.3534 55.4033 36.5334 55.53 36.6801 55.69C36.8334 55.8433 36.9501 56.0233 37.0301 56.23C37.1167 56.4367 37.1601 56.6533 37.1601 56.88V59.28C37.1601 59.52 37.1167 59.7467 37.0301 59.96C36.9501 60.1667 36.8334 60.3467 36.6801 60.5C36.5334 60.6533 36.3534 60.7767 36.1401 60.87C35.9334 60.9567 35.7034 61 35.4501 61H33.8701ZM35.5001 60.16V56H33.8301V60.16H35.5001ZM42.2 54.33H40.53V53.5H42.2V54.33ZM42.2 61.38C42.2 61.5933 42.1467 61.7967 42.04 61.99C41.9333 62.19 41.7967 62.3633 41.63 62.51C41.4633 62.6633 41.2767 62.7833 41.07 62.87C40.8633 62.9633 40.6633 63.01 40.47 63.01H39.72C39.5 63.01 39.2867 62.9633 39.08 62.87C38.8733 62.7767 38.69 62.6533 38.53 62.5C38.37 62.3467 38.24 62.17 38.14 61.97C38.0467 61.77 38 61.5633 38 61.35H38.84C38.84 61.6233 38.9333 61.83 39.12 61.97C39.3067 62.11 39.52 62.18 39.76 62.18H40.53V55.17H42.2V61.38ZM45.5293 58.5V60.16H47.0793C47.1993 60.16 47.316 60.14 47.4293 60.1C47.5426 60.0533 47.6426 59.9933 47.7293 59.92C47.816 59.8467 47.886 59.76 47.9393 59.66C47.9926 59.56 48.0193 59.45 48.0193 59.33H48.8393C48.8393 59.55 48.7893 59.76 48.6893 59.96C48.5893 60.16 48.456 60.34 48.2893 60.5C48.1293 60.6533 47.946 60.7767 47.7393 60.87C47.5326 60.9567 47.3226 61 47.1093 61H45.5593C45.326 61 45.106 60.95 44.8993 60.85C44.6993 60.75 44.5226 60.62 44.3693 60.46C44.216 60.2933 44.0926 60.1067 43.9993 59.9C43.9126 59.6933 43.8693 59.4867 43.8693 59.28V56.88C43.8693 56.6667 43.9126 56.4567 43.9993 56.25C44.0926 56.0433 44.216 55.86 44.3693 55.7C44.5293 55.54 44.7093 55.4133 44.9093 55.32C45.116 55.22 45.3326 55.17 45.5593 55.17H47.1093C47.3493 55.17 47.576 55.22 47.7893 55.32C48.0026 55.4133 48.186 55.54 48.3393 55.7C48.4926 55.86 48.6126 56.0433 48.6993 56.25C48.7926 56.4567 48.8393 56.6667 48.8393 56.88V58.5H45.5293ZM47.1693 57.67V55.99H45.5293V57.67H47.1693ZM52.1797 60.16H52.9797C53.1064 60.16 53.2264 60.1333 53.3397 60.08C53.453 60.0267 53.5497 59.9567 53.6297 59.87C53.7164 59.7833 53.783 59.6867 53.8297 59.58C53.8764 59.4667 53.8997 59.35 53.8997 59.23H54.7297C54.7297 59.45 54.6797 59.6667 54.5797 59.88C54.4797 60.0933 54.3464 60.2833 54.1797 60.45C54.0197 60.61 53.8364 60.7433 53.6297 60.85C53.423 60.95 53.213 61 52.9997 61H52.2097C51.9964 61 51.7864 60.9533 51.5797 60.86C51.3797 60.76 51.1997 60.63 51.0397 60.47C50.8864 60.31 50.7597 60.1267 50.6597 59.92C50.5664 59.7133 50.5197 59.5 50.5197 59.28V56.88C50.5197 56.6667 50.5664 56.4567 50.6597 56.25C50.7597 56.0433 50.8897 55.86 51.0497 55.7C51.2097 55.54 51.3897 55.4133 51.5897 55.32C51.7897 55.22 51.9964 55.17 52.2097 55.17H52.9997C53.213 55.17 53.423 55.22 53.6297 55.32C53.8364 55.42 54.0197 55.5533 54.1797 55.72C54.3464 55.88 54.4797 56.0667 54.5797 56.28C54.6797 56.4933 54.7297 56.71 54.7297 56.93H53.8997C53.8997 56.8167 53.873 56.7067 53.8197 56.6C53.773 56.4867 53.7064 56.3867 53.6197 56.3C53.5397 56.2067 53.443 56.1333 53.3297 56.08C53.223 56.02 53.1064 55.99 52.9797 55.99H52.1797V60.16ZM57.1986 53.5H58.8586V55.17H59.6886V56H58.8586V60.16H59.6886V61H58.1186C57.9986 61 57.8819 60.9767 57.7686 60.93C57.6553 60.8767 57.5553 60.8067 57.4686 60.72C57.3886 60.6333 57.3219 60.5367 57.2686 60.43C57.2219 60.3167 57.1986 60.2 57.1986 60.08V56H56.3986V55.17H57.1986V53.5ZM61.3693 57.23V56.65C61.3693 56.4233 61.4126 56.22 61.4993 56.04C61.5926 55.8533 61.716 55.6967 61.8693 55.57C62.0293 55.4367 62.2126 55.3367 62.4193 55.27C62.6326 55.2033 62.8593 55.17 63.0993 55.17H63.7993C64.0326 55.17 64.2526 55.2167 64.4593 55.31C64.666 55.3967 64.846 55.5167 64.9993 55.67C65.1593 55.8167 65.2826 55.99 65.3693 56.19C65.4626 56.39 65.5093 56.6033 65.5093 56.83H64.6893C64.6893 56.5767 64.6126 56.3767 64.4593 56.23C64.306 56.0767 64.1026 56 63.8493 56H63.0293V56.56L65.5093 58.68V59.31C65.5093 59.5367 65.466 59.7533 65.3793 59.96C65.2993 60.16 65.1826 60.34 65.0293 60.5C64.8826 60.6533 64.7026 60.7767 64.4893 60.87C64.2826 60.9567 64.0526 61 63.7993 61H63.0993C62.8593 61 62.6326 60.9567 62.4193 60.87C62.2126 60.7833 62.0293 60.6633 61.8693 60.51C61.716 60.3567 61.5926 60.18 61.4993 59.98C61.4126 59.78 61.3693 59.5633 61.3693 59.33H62.2093C62.2093 59.5833 62.2893 59.7867 62.4493 59.94C62.616 60.0933 62.8326 60.17 63.0993 60.17H63.8593V59.5L61.3693 57.23Z" fill="black"/>
</svg>

    )
}



function Dashboard(props) {
    const { classes, status, settings } = props;
    const [availableJobs, setAvailableJobs] = React.useState(new Array());
    const [showJobSelection, setShowJobSelection] = React.useState(false);
    const [openCustomerSupport, setOpenCustomerSupport] = React.useState(false);
    const [alertMessage, setAlertMessage] = React.useState("");
    const [showNewFileAlert, setShowNewFileAlert] = React.useState(false);
    const [enableEditButton, setEnableEditButton] = React.useState(false);
    const [openProbingSuccess, setOpenProbingSuccess] = React.useState(false);

    ipcRenderer.send('Logs::LogString', 'CRWrite Version: ' + packageJSON.version);

    ipcRenderer.removeAllListeners("CRFileDoubleClick");
    ipcRenderer.on("CRFileDoubleClick", (event, path) => {
        ipcRenderer.send('Logs::LogString', "command line:");
        ipcRenderer.send('Logs::LogString', path.cl);
        ipcRenderer.send('Logs::LogString', "working directory:");
        ipcRenderer.send('Logs::LogString', path.wd);

        ipcRenderer.removeAllListeners("Jobs::JobSelected");
        ipcRenderer.on("Jobs::JobSelected", (event) => {
            props.setNavigateToMilling(true);
        });
        
        ipcRenderer.send('File::DoubleClickSetFilePath', path);
        ipcRenderer.once('Jobs::ResponseGetJobsFromPath', (event, jobs) => {
            if (typeof jobs !== "string") {
                setAvailableJobs(jobs);
                setShowJobSelection(true);
            }
            else {
                setAlertMessage("File error: " + jobs);  // Jobs is an error string instead
            }
        });
        ipcRenderer.send('Jobs::GetJobsFromPath', path);

    });

    ipcRenderer.removeAllListeners("CNC::ProbingWizardComplete");
    ipcRenderer.on("CNC::ProbingWizardComplete", (event) => {
        setOpenProbingSuccess(true);
    })

    const CoastRunnerImage = () => {
        return (
                <img style={{
                        border: '1px solid black',
                        borderRadius: '0px',
                        boxShadow: "2px 2px 0px 0px black",
                        width: '100%',
                        }}
                        src='./static/img/CoastRunner.svg' 
                        />
        );
    }

    function showFilePicker() {
        ipcRenderer.removeAllListeners("Jobs::JobSelected");
        ipcRenderer.on("Jobs::JobSelected", (event) => {
            props.setNavigateToMilling(true);
        });

        ipcRenderer.removeAllListeners("ShowJobSelection");
        ipcRenderer.on("ShowJobSelection", (event, jobs) => {
            setAvailableJobs(jobs);
            setShowJobSelection(true);
        });

        ipcRenderer.removeAllListeners("InvalidCRFile");
        ipcRenderer.on("InvalidCRFile", (event, filename, error) => {
            setAlertMessage("CR file error: " + error);
        });

        ipcRenderer.send('File::OpenFileDialog');
    }

    function onClickRun() {
        if (status === 2 || enableEditButton) {
            if (enableEditButton) {
                setShowNewFileAlert(true);
            } else {
                showFilePicker();
            }
        }
    }

    function onCloseJobSelection(event) {
        setShowJobSelection(false);
    }

    function refreshJobs() {
        ipcRenderer.once('File::ResponseGetExistingJobs', (event, jobs) => {
            console.log("refreshJobs - jobs: " + JSON.stringify(jobs));
            setAvailableJobs(jobs);
        });
        ipcRenderer.send("File::GetExistingJobs");

    }

    function handleNewFileYes() {
        ipcRenderer.removeAllListeners("Jobs::JobSelected");
        ipcRenderer.on("Jobs::JobSelected", (event) => {
            props.setNavigateToMilling(true);
        });

        ipcRenderer.removeAllListeners("ShowJobSelection");
        ipcRenderer.on("ShowJobSelection", (event, jobs) => {
            setAvailableJobs(jobs);
            setShowJobSelection(true);
        });
        ipcRenderer.once('File::ResponsePickNewCRFileDirectory', (event, filepath) => {
            console.log("filepath: " + JSON.stringify(filepath));
            setShowNewFileAlert(false);
        });
        ipcRenderer.send('File::PickNewCRFileDirectory')
    }

    function handleNewFileNo() {
        setShowNewFileAlert(false);
        showFilePicker();
    }

    function handleManualOpenClick() {
        props.toggleShuttle();
    }

    function handleProbingPopupOk() {
        setOpenProbingSuccess(false);
        props.setOpenProbingWizard(false);
    }

    setTimeout(function() {
        ipcRenderer.once('ResponseGetPassedInFilePath', (event, filePath) => {
            if (filePath != null) {
                ipcRenderer.send('File::DoubleClickSetFilePath', filePath);
            }
        });
        ipcRenderer.once('ResponseGetPassedInJobs', (event, jobs) => {
            if (jobs != null) {
                ipcRenderer.removeAllListeners("Jobs::JobSelected");
                ipcRenderer.on("Jobs::JobSelected", (event) => {
                    props.setNavigateToMilling(true);
                });
                setAvailableJobs(jobs);
                setShowJobSelection(true);
            }
        });
        ipcRenderer.send("GetPassedInFilePath");
        ipcRenderer.send('GetPassedInJobs');
    },
    500);

    useEffect(() => {
        if (settings) {
            setEnableEditButton(settings.enableEditButton);
        }
    }, [settings && settings.enableEditButton]);

    useEffect(() => {
        if (status != 2) {
            props.setOpenProbingWizard(false);
        }
    }, [status]);
    
    if (props.navigateToMilling) {
        ipcRenderer.removeAllListeners("CRFileDoubleClick");
        return (<Redirect to='/milling' />);
    }


    return (
        // <section className={classes.dashboardStyle}>
        
        
        //         <Grid container
        //             justify="space-evenly"
        //             spacing={6}
        //             style={{ height: '100%', padding: "38px" }}
        //         >
        //             <Grid item xs={4}>
        //                 <Grid container direction='column' spacing={4}  style={{ flexWrap: 'inherit' }}>
        //                     <Grid item>
        //                         <CoastRunnerImage />
        //                     </Grid>
        //                     <Grid item>
        //                         <ItemPanel title="Quick Actions" color="secondary">
        //                             <Grid container direction='column' justify='space-evenly' alignItems='center' style={{height: '200px'}}>
        //                                 <Grid item>
        //                                     <Button disabled={true} classes={{root: classes.smallGreyButton}}>Open Last Job</Button>
        //                                 </Grid>
        //                                 <Grid item>
        //                                     <Button disabled={true} classes={{root: classes.smallGreyButton}}>Set Home Position</Button>
        //                                 </Grid>
        //                                 <Grid item>
        //                                     <Button disabled={true} classes={{root: classes.smallGreyButton}}>Auto Level</Button>
        //                                 </Grid>
        //                             </Grid>
        //                         </ItemPanel>
        //                     </Grid>
        //                 </Grid>
        //             </Grid>
        //             <Grid item xs={8}>
        //                 <Grid container direction='column' spacing={4}>
        //                     <Grid item>
        //                         <ItemPanel title="Guided Mode">
        //                             <Grid container alignItems="center" justify="space-evenly" style={{height: '120px', width: '100%'}}>
        //                                 <Grid item>
        //                                     <Button id="run-code" onClick={onClickRun} classes={{root: classes.standardButton}}>Open</Button>
        //                                 </Grid>
        //                                 <Grid item>
        //                                     <Button id="store" onClick={() => { shell.openExternal(app.dashboard.store.url) }}classes={{root: classes.standardButton}}>Store</Button>
        //                                 </Grid>
        //                                 <Grid item>
        //                                     <Button disabled={true} classes={{root: classes.standardButton}}>Help</Button>
        //                                 </Grid>
        //                             </Grid>
        //                         </ItemPanel>
        //                     </Grid>
        //                     <Grid item>
        //                         <ItemPanel title="Manual Mode">
        //                             <Grid container alignItems='center' style={{height: '120px', width: '100%'}}>
        //                                 <Grid item>
        //                                     <Button style={{marginLeft: '100px'}} onClick={handleManualOpenClick} classes={{root: classes.standardButton}}>Open</Button>
        //                                 </Grid>
        //                                 <Grid item>
        //                                     <Button disabled={true} style={{marginLeft: '100px'}} classes={{root: classes.standardButton}}>File Editor</Button>
        //                                 </Grid>
        //                             </Grid>
        //                         </ItemPanel>
        //                     </Grid>
        //                 </Grid>
        //             </Grid>
        //         </Grid>


        
        
        //
        //
        //
        //
        //
        
<div style={{flexGrow: 1}}>
    <Alert open={alertMessage.length > 0} message={alertMessage} onOk={(event) => { setAlertMessage("") }} onCancel={(e) => { setAlertMessage("")}} />
    <Alert open={openProbingSuccess} message="Probing successfull." yesNo={false} onOk={handleProbingPopupOk} />
    <ProbingWizard open={props.openProbingWizard} setOpenProbingWizard={props.setOpenProbingWizard} setOpenProbingSuccess={setOpenProbingSuccess} />
    <Alert open={showNewFileAlert} message="Would you like to create a new file?" yesNo={true} onOk={handleNewFileYes} onCancel={handleNewFileNo} />
    <Menu />
    <JobSelection open={showJobSelection} onClose={onCloseJobSelection} jobs={availableJobs} status={status} refreshJobs={refreshJobs} enableEditButton={enableEditButton} />

        <Grid container direction="column">
            <Grid item>
                <Grid container justify='space-between' style={{height: '60vh', paddingTop: '64px', paddingRight: '16px'}}>
                    <Grid item xs={3}>
                    </Grid>
                    <Grid item>
                        <ItemPanel small title="CRWrite">
                        <img src={path.join(__dirname, './static/img/DashboardBeach.png')} />
                        </ItemPanel>
                    </Grid>
                    <Grid item xs={3}>
                        <Grid container direction='column' alignItems="flex-end">

                        <GuidedModeSVG onClick={onClickRun} />
                        <Shuttle openShuttle={props.openShuttle} shuttleSelectedTab={props.shuttleSelectedTab} toggleShuttle={props.toggleShuttle} milling={props.milling} status={props.status} firmware={props.firmware} closeOperationsWindow={props.closeOperationsWindow} setOperationsWindowOpen={props.setOperationsWindowOpen} feedRate={props.feedRate} updateFeedRate={props.updateFeedRate} />
                        <FileCreater onClick={() => {props.setOpenProbingWizard(true)}} />
                        <Projects onClick={() => {}} />

                        </Grid>
                    </Grid>
                </Grid>
            </Grid>
        </Grid>
</div>
    );
}

Dashboard.propTypes = {
    classes: PropTypes.object.isRequired,
    status: PropTypes.number.isRequired
};

export default withStyles(styles)(Dashboard);
